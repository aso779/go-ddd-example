{
	"info": {
		"_postman_id": "f55535c6-c4f5-4f18-8024-dcba7034c4b6",
		"name": "go-ddd-example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "book",
			"item": [
				{
					"name": "bookOneById",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookOneById($filter: BookFilter!){\n  bookOne(filter: $filter) {\n        id\n        genreId\n        title\n        description\n        price{\n            amount\n            currency\n        }\n        createdAt\n        updatedAt\n        genre{\n            id\n            title\n            createdAt\n            updatedAt\n        }\n        authors{\n            id\n            name\n        }\n  }\n}",
								"variables": "{\n    \"filter\": {\n        \"id\": {\n            \"eq\": 7\n        }\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "bookPageSort",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookPage($filter: BookFilter!, $page: Page!, $sort: BookSort!){\n  bookPage(filter: $filter, page: $page, sort: $sort) {\n      items{\n        id\n        genreId\n        title\n        description\n        price{\n            amount\n            currency\n        }\n      }\n      pageInfo{\n          size\n          number\n          totalCount\n      }\n  }\n}",
								"variables": "{\n    \"filter\": {},\n    \"page\": {\"size\": 4, \"number\": 1},\n    \"sort\": {\"title\":\"asc\"}\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "bookPageNestedFilter",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookPage($filter: BookFilter!, $page: Page!, $sort: BookSort!){\n  bookPage(filter: $filter, page: $page, sort: $sort) {\n      items{\n        id\n        genreId\n        title\n        description\n        price{\n            amount\n            currency\n        }\n        createdAt\n        authors{\n            id\n            name\n        }\n        genre{\n            id\n            title\n        }\n      }\n      pageInfo{\n          size\n          number\n          totalCount\n      }\n  }\n}",
								"variables": "{\n    \"filter\": {\n        \"author\":{\n            \"name\":{\n                \"search\": \"%Mar%\",\n                \"caseSensitive\": false\n            }\n        },\n        \"genre\": {\n            \"title\": {\n                \"search\": \"%DDD%\",\n                \"caseSensitive\": false\n            }\n        }\n    },\n    \"page\": {\"size\": 4, \"number\": 1},\n    \"sort\": {\"title\":\"asc\"}\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "bookPageDateFilter",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookPage($filter: BookFilter!, $page: Page!, $sort: BookSort!){\n  bookPage(filter: $filter, page: $page, sort: $sort) {\n      items{\n        id\n        genreId\n        title\n        description\n        price{\n            amount\n            currency\n        }\n        createdAt\n        authors{\n            id\n            name\n        }\n        genre{\n            id\n            title\n        }\n      }\n      pageInfo{\n          size\n          number\n          totalCount\n      }\n  }\n}",
								"variables": "{\n    \"filter\": {\n        \"createdAt\": {\n            \"lte\": \"2022-04-01T16:00:00+03:00\"\n        }\n    },\n    \"page\": {\"size\": 4, \"number\": 1},\n    \"sort\": {\"title\":\"asc\"}\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "bookOneCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation bookOneCreate(\n    $genreId: Int!,\n    $title: String!,\n    $description: String,\n    $amount: Int!,\n    $currency: String!,\n    $authors: [Int!]!\n    ){\n    bookOneCreate(input:{\n          genreId: $genreId\n          title: $title\n          description: $description\n          price: {\n              amount: $amount\n              currency: $currency\n          }\n          authors: $authors\n    })\n    {\n      id\n      genreId\n      title\n      description\n      price{\n          amount\n          currency\n      }\n      genre{\n          id\n          title\n          createdAt\n          updatedAt\n        }\n        authors{\n          id\n          name\n        }\n    }\n}",
								"variables": "{\n    \"genreId\": 2,\n    \"title\": \"Domain-Driven Design Distilled\",\n    \"description\": \"\",\n    \"amount\": 3649,\n    \"currency\": \"USD\",\n    \"authors\": [1,2]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "bookOneUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation bookOneUpdate(\n    $id: Int!,\n    $authors: [Int!]!\n    ){\n    bookOneUpdate(input:{\n          id: $id\n          authors: $authors\n    })\n    {\n      id\n      genreId\n      title\n      description\n      price{\n          amount\n          currency\n      }\n      genre{\n          id\n          title\n          createdAt\n          updatedAt\n        }\n        authors{\n          id\n          name\n      }\n      createdAt\n      updatedAt\n    }\n}",
								"variables": "{\n    \"id\": 4,\n    \"authors\": [4,5,6,7,1]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "bookDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation bookDelete($filter: BookFilter!){\n  bookDelete(filter: $filter)\n}",
								"variables": "{\n    \"filter\": {\n        \"id\": {\n            \"eq\": 6\n        }\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "author",
			"item": [
				{
					"name": "authorOneCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation authorOneCreate($name: String!){\n    authorOneCreate(input:{\n        name: $name\n    })\n    {\n      id\n      name\n      createdAt\n      updatedAt\n    }\n}",
								"variables": "{\n    \"name\": \"Robert C. Martin\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "authorOneUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation authorOneUpdate($id: Int!, $name: String!){\n    authorOneUpdate(input:{\n        id: $id\n        name: $name\n    })\n    {\n      id\n      name\n      createdAt\n      updatedAt\n    }\n}",
								"variables": "{\n    \"id\": 11,\n    \"name\": \"Robert C. Martin (“Uncle Bob”)\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "genre",
			"item": [
				{
					"name": "genreOneCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation genreOneCreate($parentId: Int!, $title: String!){\n    genreOneCreate(input:{\n        parentId: $parentId\n        title: $title\n    })\n    {\n      id\n      title\n      createdAt\n      updatedAt\n    }\n}",
								"variables": "{\n    \"parentId\": 1,\n    \"title\": \"DevOops\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "genreOneUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation genreOneUpdate($id: Int!, $title: String!){\n    genreOneUpdate(input:{\n        id: $id\n        title: $title\n    })\n    {\n      id\n      title\n      createdAt\n      updatedAt\n    }\n}",
								"variables": "{\n    \"id\": 6,\n    \"title\": \"DevOps\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8002/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}